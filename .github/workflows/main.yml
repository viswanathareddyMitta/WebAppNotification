name: Build, Test, Tag, and Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # Build using MSBuild for legacy ASP.NET
      - name: Build solution
        run: msbuild NotifierWeb.csproj /p:Configuration=Release

      # If you have unit tests, adjust the following step accordingly
      # Example uses vstest.console.exe for test projects
      - name: Run tests
        run: |
          if (Test-Path "WebAppNotification/bin/Release") {
            $testDLLs = Get-ChildItem -Path WebAppNotification/bin/Release -Recurse -Filter *.Tests.dll
            foreach ($dll in $testDLLs) {
              & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" $dll.FullName
            }
          }

      - name: Publish (zip) build artifacts
        run: |
          Compress-Archive -Path WebAppNotification/bin/Release/* -DestinationPath app.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: app.zip

  tag:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest tag
        id: get_tag
        run: |
          git_tag=$(git tag --list "v*" --sort=-v:refname | head -n 1)
          if [[ -z "$git_tag" ]]; then
            echo "tag=v1.0.0" >> $GITHUB_OUTPUT
          else
            version=$(echo $git_tag | sed 's/v//')
            arr=(${version//./ })
            ((arr[2]++))
            new_tag="v${arr[0]}.${arr[1]}.${arr[2]}"
            echo "tag=$new_tag" >> $GITHUB_OUTPUT
          fi

      - name: Create new tag and push
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.get_tag.outputs.tag }}
          git push https://${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git ${{ steps.get_tag.outputs.tag }}

  release:
    needs: [build-and-test, tag]
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app
          path: .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: true
          files: app.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
