name: Build, Test, Tag, and Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build-test-tag-release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
      - name: Restore NuGet packages
        run: nuget restore NotifierWeb.csproj -SolutionDirectory ${{ github.workspace }}

      - name: Build solution
        run: msbuild NotifierWeb.csproj /p:Configuration=Release

      - name: Print working directory and list files
        run: |
              pwd
              ls -Recurse

      - name: List files after build (diagnostics)
        run: Get-ChildItem -Path . -Recurse -Force

      - name: Archive build output
        shell: pwsh
        run: |
            $obj = "obj/Release"
            if ((Test-Path $obj) -and ((Get-ChildItem $obj | Measure-Object).Count -gt 0)) {
            Write-Host "Archiving from $obj"
            Compress-Archive -Path "$obj/*" -DestinationPath app.zip
            } else {
            Write-Host "No build artifacts found to compress."
            exit 1
            }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: app.zip

      - name: Get version from csproj
        id: get_version
        shell: pwsh
        run: |
          [xml]$proj = Get-Content NotifierWeb.csproj
          $version = $proj.Project.PropertyGroup.Version
          if (-not $version) {
            $version = "1.0.${{ github.run_number }}"
          }
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create Git tag
        if: github.ref == 'refs/heads/master'
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a "v${{ env.VERSION }}" -m "Release v${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/master'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: |
            Automated release for v${{ env.VERSION }}
          files: app.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
