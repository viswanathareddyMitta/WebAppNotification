name: Build, Test, Tag, and Release

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-test-tag-release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
      - name: Restore NuGet packages
        run: nuget restore NotifierWeb.csproj -SolutionDirectory ${{ github.workspace }}

      - name: Build solution
        run: msbuild WebAppNotification/NotifierWeb.csproj /p:Configuration=Release

      - name: List files after build (diagnostics)
        run: Get-ChildItem -Path . -Recurse -Force

      - name: Run tests
        shell: pwsh
        run: |
          $dlls = Get-ChildItem -Path "WebAppNotification/bin/Release" -Filter *.dll -Recurse | Where-Object { $_.Name -notmatch 'ref|TestAdapter' }
          if ($dlls) {
            foreach ($dll in $dlls) {
              Write-Host "Testing $($dll.FullName)"
              vstest.console.exe $dll.FullName
            }
          } else {
            Write-Host "No test DLLs found."
            exit 1
          }

      - name: Archive build output
        shell: pwsh
        run: |
          $release = "WebAppNotification/bin/Release"
          $bin = "WebAppNotification/bin"
          if (Test-Path $release -and (Get-ChildItem $release | Measure-Object).Count -gt 0) {
            Write-Host "Archiving from $release"
            Compress-Archive -Path "$release/*" -DestinationPath app.zip
          } elseif (Test-Path $bin -and (Get-ChildItem $bin | Measure-Object).Count -gt 0) {
            Write-Host "Archiving from $bin"
            Compress-Archive -Path "$bin/*" -DestinationPath app.zip
          } else {
            Write-Host "No build artifacts found to compress."
            exit 1
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: app.zip

      - name: Get version from csproj
        id: get_version
        shell: pwsh
        run: |
          [xml]$proj = Get-Content WebAppNotification/NotifierWeb.csproj
          $version = $proj.Project.PropertyGroup.Version
          if (-not $version) {
            $version = "1.0.${{ github.run_number }}"
          }
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create Git tag
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a "v${{ env.VERSION }}" -m "Release v${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: |
            Automated release for v${{ env.VERSION }}
          files: app.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
